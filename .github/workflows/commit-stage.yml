name: Commit Stage
on: push

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: thomasvitale/band-service
  VERSION: ${{ github.sha }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out source code
        uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle
      - name: Compile and test
        run: ./gradlew clean build
      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          path: "${{ github.workspace }}"
          fail-build: true
          severity-cutoff: high
          acs-report-enable: true
      # - name: Upload vulnerability report
      #   uses: github/codeql-action/upload-sarif@v2
      #   if: success() || failure()
      #   with:
      #     sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Package as OCI image
        run: ./gradlew bootBuildImage --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3.2.5
        id: scan
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          fail-build: true
          severity-cutoff: high
          acs-report-enable: true
      # - name: Upload vulnerability report
      #   uses: github/codeql-action/upload-sarif@v2
      #   if: success() || failure()
      #   with:
      #     sarif_file: ${{ steps.scan.outputs.sarif }}
      - uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.REGISTRY }}
      - name: Publish OCI image 
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

  provenance:
    name: Provenance
    runs-on: ubuntu-22.04
    needs: [build]
    permissions:
      contents: write
      packages: write
    steps:
      - uses: redhat-actions/podman-login@v1.4
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.REGISTRY }}
      - name: Fetch OCI image 
        run: podman pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      - name: Get OCI image digest
        id: digest
        run: |
          echo "::set-output name=digest::$(podman inspect --format='{{.Digest}}' ${REGISTRY}/${IMAGE_NAME}:${VERSION})"
      - name: Install Cosign
        uses: sigstore/cosign-installer@v2.5.1
        with:
          cosign-release: 'v1.11.1'
      - name: Generate provenance
        uses: philips-labs/slsa-provenance-action@v0.8.0
        with:
          command: generate
          subcommand: container
          arguments: --repository ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --tags ${{ env.VERSION }} --digest ${{ steps.digest.outputs.digest }}
      - name: Upload provenance
        uses: actions/upload-artifact@v3
        with:
          path: provenance.json